{"version":3,"sources":["../src/cli.js"],"names":["compileModule","modulePath","absoluteModulePath","path","resolve","process","cwd","moduleRoot","dirname","code","fs","readFileSync","trim","undefined","global","__filename","__dirname","module","Module","filename","paths","_nodeModulePaths","exports","require","bind","transpiledCode","babel","transform","presets","babelPresetJsxcad","plugins","jsxcadModule","vm","runInThisContext","convert","inputFile","outputFile","format","solidData","main","writeFileSync","asBuffer","argv","yargs","scriptName","usage","option","alias","default","choices","describe","help","_","length","console","log","exit","output","catch","err","error","message"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport fs from 'fs';\nimport vm from 'vm';\nimport path from 'path';\nimport Module from 'module';\nimport * as babel from '@babel/core';\nimport babelPresetJsxcad from 'babel-preset-jsxcad';\nimport {prepareOutput} from '@jscad/core/io/prepareOutput';\nimport {convertToBlob} from '@jscad/core/io/convertToBlob';\nimport yargs from 'yargs';\nimport {log} from './util';\n\n/**\n * Transpile JSX/ESM syntax into Node.js executable and obtain main function.\n */\nfunction compileModule(modulePath) {\n  const absoluteModulePath = path.resolve(process.cwd(), modulePath);\n  const moduleRoot = path.dirname(absoluteModulePath);\n  const code = fs.readFileSync(absoluteModulePath, 'utf8').trim();\n  if (!code) return undefined;\n  log('code', code);\n\n  global.__filename = absoluteModulePath;\n  global.__dirname = moduleRoot;\n\n  log(global.__dirname);\n\n  const module = new Module(global.__filename);\n  module.filename = global.__filename;\n  module.paths = Module._nodeModulePaths(global.__dirname);\n\n  global.exports = module.exports;\n  global.module = module;\n  global.require = module.require.bind(module);\n\n  const transpiledCode = babel.transform(code, {\n    filename: global.__filename,\n    presets: [babelPresetJsxcad],\n    plugins: [],\n  }).code;\n  log('transpiled code', transpiledCode);\n\n  const jsxcadModule = vm.runInThisContext(transpiledCode, {\n    filename: global.__filename,\n  });\n  // log('main', jsxcadModule.main());\n  // log('getParameterDefinitions', jsxcadModule.getParameterDefinitions().length);\n\n  return jsxcadModule;\n}\n\nasync function convert(inputFile, outputFile, format) {\n  const jsxcadModule = compileModule(inputFile);\n  const solidData = convertToBlob(prepareOutput(jsxcadModule.main(), {format}));\n  fs.writeFileSync(outputFile, solidData.asBuffer());\n}\n\nconst argv = yargs\n  .scriptName('jsxcad')\n  .usage('Usage: $0 [options] <input>')\n  .option('format', {\n    alias: 'f',\n    default: 'stl',\n    choices: ['stl'],\n    describe: 'Output format',\n  })\n  .option('output', {\n    alias: 'o',\n    describe: 'Output filename',\n  })\n  .help('h')\n  .alias('h', 'help').argv;\n\nif (argv._.length === 0) {\n  console.log('No input specified. Run with --help to show help');\n  process.exit(1);\n}\n\nconst format = argv.format;\nconst inputFile = argv._[0];\nconst outputFile = argv.output || `${inputFile}.${format}`;\n\nconvert(inputFile, outputFile, format).catch((err) => {\n  console.error('Error! ->', err.message);\n});\n"],"file":"cli.js"}