{"version":3,"sources":["../src/jsxcad.js"],"names":["color","CSG","circle","square","polygon","triangle","primitives2d","cube","sphere","cylinder","geodesicSphere","torus","polyhedron","primitives3d","extrudeInOrthonormalBasis","extrudeInPlane","extrude","linear_extrude","rotate_extrude","rotateExtrude","rectangular_extrude","extrusions","union","difference","intersection","booleanOps","translate","center","scale","rotate","transform","mirror","expand","contract","minkowski","hull","chain_hull","transformations","Intersection","csgObject","Cube","props","JSXCAD","isCSG","obj","hasOwnProperty","hasCSGRender","v","__proto__","isClass","render","element","config","csgRender","childElements","children","renderedChildren","map","childElement","_","propsWithoutChildren","createElement","fn","args","hasChildren","length","rawChildren","concat","filter","c","child","finalize","definitions","main","getParameterDefinitions","Fragment"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAUC,aAAID,KAApB;AACA,MAAM;AAACE,EAAAA,MAAD;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA;AAA1B,IAAsCJ,aAAIK,YAAhD;AACA,MAAM;AACJC,EAAAA,IADI;AAEJC,EAAAA,MAFI;AAGJC,EAAAA,QAHI;AAIJC,EAAAA,cAJI;AAKJC,EAAAA,KALI;AAMJC,EAAAA;AANI,IAOFX,aAAIY,YAPR;AAQA,MAAM;AACJC,EAAAA,yBADI;AAEJC,EAAAA,cAFI;AAGJC,EAAAA,OAHI;AAIJC,EAAAA,cAJI;AAKJC,EAAAA,cALI;AAMJC,EAAAA,aANI;AAOJC,EAAAA;AAPI,IAQFnB,aAAIoB,UARR;AASA,MAAM;AAACC,EAAAA,KAAD;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,IAAoCvB,aAAIwB,UAA9C;AACA,MAAM;AACJC,EAAAA,SADI;AAEJC,EAAAA,MAFI;AAGJC,EAAAA,KAHI;AAIJC,EAAAA,MAJI;AAKJC,EAAAA,SALI;AAMJC,EAAAA,MANI;AAOJC,EAAAA,MAPI;AAQJC,EAAAA,QARI;AASJC,EAAAA,SATI;AAUJC,EAAAA,IAVI;AAWJC,EAAAA;AAXI,IAYFnC,aAAIoC,eAZR,C,CAcA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEO,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAmC;AACxC,SAAO,MAAMf,YAAY,CAACe,SAAD,CAAzB;AACD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAC1B,iBAAI,MAAJ,EAAYA,KAAZ;AACA,SAAO,MAAMlC,IAAI,CAACkC,KAAD,CAAjB;AACD;AAED;;;;;;AAIA,SAASC,MAAT,GAAkB;AAChB,WAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,WAAOA,GAAG,CAACC,cAAJ,CAAmB,UAAnB,CAAP;AACD;;AAED,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,WAAO,OAAOA,CAAP,KAAa,UAAb,IAA2B,eAAeA,CAAC,CAACC,SAAnD;AACD;;AAED,WAASC,OAAT,CAAiBF,CAAjB,EAAoB;AAClB,WAAO,OAAOA,CAAP,KAAa,UAAb,IAA2B,YAAYA,CAAC,CAACC,SAAhD;AACD,GAXe,CAahB;;;AACA,WAASE,MAAT,CAAgBC,OAAhB,EAAyBC,MAAM,GAAG,EAAlC,EAAsC;AACpC,mBAAK,UAASD,OAAO,CAACE,SAAU,EAAhC;AAEA,UAAM;AAACA,MAAAA,SAAD;AAAYZ,MAAAA;AAAZ,QAAqBU,OAA3B,CAHoC,CAKpC;;AACA,UAAMG,aAAa,GAAGb,KAAK,CAACc,QAAN,IAAkB,EAAxC;AACA,UAAMC,gBAAgB,GAAGF,aAAa,CAACG,GAAd,CAAmBC,YAAD,IAAkB;AAC3D,aAAOR,MAAM,CAACQ,YAAD,EAAejB,KAAf,CAAb;AACD,KAFwB,CAAzB;AAIA,mBAAI,UAAJ,EAAgBe,gBAAhB,EAAkCH,SAAlC,EAXoC,CAapC;;AACA,UAAM;AAACE,MAAAA,QAAQ,EAAEI,CAAX;AAAc,SAAGC;AAAjB,QAAyCnB,KAA/C;AACA,WAAOY,SAAS,CAAC;AACfd,MAAAA,SAAS,EAAEiB,gBADI;AAEff,MAAAA,KAAK,EAAEmB;AAFQ,KAAD,CAAhB;AAID;;AAED,WAASC,aAAT,CAAuBC,EAAvB,EAA2BrB,KAAK,GAAG,EAAnC,EAAuC,GAAGsB,IAA1C,EAAgD;AAC9C,mBAAK,iBAAgBD,EAAG,EAAxB;AACA,UAAME,WAAW,GAAGD,IAAI,CAACE,MAAL,GAAc,CAAlC;AACA,UAAMC,WAAW,GAAGF,WAAW,GAAG,GAAGG,MAAH,CAAU,GAAGJ,IAAb,CAAH,GAAwB,EAAvD,CAH8C,CAK9C;;AACA,UAAMR,QAAQ,GAAGW,WAAW,CACzBE,MADc,CACNC,CAAD,IAAOA,CAAC,IAAI,IAAL,IAAaA,CAAC,KAAK,KADnB,EAEdZ,GAFc,CAETa,KAAD,IAAWT,aAAa,CAACS,KAAD,EAAQlB,MAAR,CAFd,CAAjB;AAIA,UAAMb,SAAS,GAAGuB,EAAE,CAAC,EAAC,GAAGrB,KAAJ;AAAWF,MAAAA,SAAS,EAAEgB;AAAtB,KAAD,CAApB;AAEA,WAAOhB,SAAP;AACD;;AAED,WAASgC,QAAT,CAAkBT,EAAlB,EAAsBU,WAAW,GAAG,EAApC,EAAwC;AACtC,mBAAI,UAAJ,EAAgBV,EAAhB;AACA,WAAO;AACLW,MAAAA,IAAI,EAAGhC,KAAD,IAAWoB,aAAa,CAACC,EAAD,EAAKrB,KAAL,CADzB;AAELiC,MAAAA,uBAAuB,EAAE,MAAMF;AAF1B,KAAP;AAID;;AAED,WAASG,QAAT,GAAoB,CAAE;;AAEtB,SAAO;AACLd,IAAAA,aADK;AAELX,IAAAA,MAFK;AAGLqB,IAAAA,QAHK;AAILI,IAAAA;AAJK,GAAP;AAMD;;eAEcjC,MAAM,E","sourcesContent":["import CSG from '@jscad/csg/api';\nimport {log} from './util';\n\nconst {color} = CSG.color;\nconst {circle, square, polygon, triangle} = CSG.primitives2d;\nconst {\n  cube,\n  sphere,\n  cylinder,\n  geodesicSphere,\n  torus,\n  polyhedron,\n} = CSG.primitives3d;\nconst {\n  extrudeInOrthonormalBasis,\n  extrudeInPlane,\n  extrude,\n  linear_extrude,\n  rotate_extrude,\n  rotateExtrude,\n  rectangular_extrude,\n} = CSG.extrusions;\nconst {union, difference, intersection} = CSG.booleanOps;\nconst {\n  translate,\n  center,\n  scale,\n  rotate,\n  transform,\n  mirror,\n  expand,\n  contract,\n  minkowski,\n  hull,\n  chain_hull,\n} = CSG.transformations;\n\n// export function LinearExtrude({props, csgObject}) {\n//   return linear_extrude(props, csgObject);\n// }\n\n// export function Translate({props, csgObject}) {\n//   return translate(props, csgObject);\n// }\n\n// export function Union({csgObject}) {\n//   return union(csgObject);\n// }\n\n// export function Difference({csgObject}) {\n//   return difference(csgObject);\n// }\n\nexport function Intersection({csgObject}) {\n  return () => intersection(csgObject);\n}\n\n// export function Color({props, csgObject}) {\n//   return color(props.rgb, csgObject);\n// }\n\n// export function Cylinder({props}) {\n//   return cylinder(props);\n// }\n\n// export function Sphere({props}) {\n//   return sphere(props);\n// }\n\n// export function GeodesicSphere({props}) {\n//   return geodesicSphere(props);\n// }\n\n// export function Square({props}) {\n//   return square(props);\n// }\n\n// export function Circle({props}) {\n//   return circle(props);\n// }\n\nexport function Cube(props) {\n  log('Cube', props);\n  return () => cube(props);\n}\n\n/**\n * fn: Functional component (props) => fnOrElement\n * element: Object {csgGenFn, props}\n */\nfunction JSXCAD() {\n  function isCSG(obj) {\n    return obj.hasOwnProperty('polygons');\n  }\n\n  function hasCSGRender(v) {\n    return typeof v === 'function' && 'csgRender' in v.__proto__;\n  }\n\n  function isClass(v) {\n    return typeof v === 'function' && 'render' in v.__proto__;\n  }\n\n  // convert functions into csg polygon object by invoking csgRender\n  function render(element, config = {}) {\n    log(`render ${element.csgRender}`);\n\n    const {csgRender, props} = element;\n\n    // Aggregate children props and apply render method\n    const childElements = props.children || [];\n    const renderedChildren = childElements.map((childElement) => {\n      return render(childElement, props);\n    });\n\n    log('rendered', renderedChildren, csgRender);\n\n    // Generate and return CSG\n    const {children: _, ...propsWithoutChildren} = props;\n    return csgRender({\n      csgObject: renderedChildren,\n      props: propsWithoutChildren,\n    });\n  }\n\n  function createElement(fn, props = {}, ...args) {\n    log(`createElement ${fn}`);\n    const hasChildren = args.length > 0;\n    const rawChildren = hasChildren ? [].concat(...args) : [];\n\n    // const props = Object.assign({}, config);\n    const children = rawChildren\n      .filter((c) => c != null && c !== false)\n      .map((child) => createElement(child, config));\n\n    const csgObject = fn({...props, csgObject: children});\n\n    return csgObject;\n  }\n\n  function finalize(fn, definitions = []) {\n    log('finalize', fn);\n    return {\n      main: (props) => createElement(fn, props),\n      getParameterDefinitions: () => definitions,\n    };\n  }\n\n  function Fragment() {}\n\n  return {\n    createElement,\n    render,\n    finalize,\n    Fragment,\n  };\n}\n\nexport default JSXCAD();\n"],"file":"jsxcad.js"}